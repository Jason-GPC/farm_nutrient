<?php
/**
 * @file
 * Code for the Farm Nutrient feature.
 */

include_once 'farm_nutrient.features.inc';

/**
 * Implements hook_help().
 */
function farm_nutrient_help($path, $arg) {

  // Add help text to the nutrient plan list page.
  if ($path == 'farm/plans/nutrient') {
    $help = '<p>' . t("This page lists all nutrient management plans. Select one from the list below to view it, or click \"Add nutrient management plan\" to create a new one.") . '</p>';
    $help .= '<p>' . t("Plans can be archived for future reference. To view archived plans, use the \"Filter/sort\" options in the list below.") . '</p>';
    return $help;
  }

  // If the path starts with 'farm/plan/%', then load the plan and see if it is
  // a nutrient plan. If not, bail. Otherwise continue.
  if (strpos($path, 'farm/plan/%') === 0) {
    $plan = farm_plan_load($arg[2]);
    if (empty($plan) || $plan->type != 'nutrient') {
      return '';
    }
  }

  // Add help text to all farm/plan/% paths.
  switch ($path) {

    // Plan add/edit form.
    case 'farm/plan/add/nutrient':
    case 'farm/plan/%/edit':
      $help = '<p>' . t('Use the form below to define the specifics for this nutrient management plan.') . '</p>';
      $help .= '<p>' . t('A plan has a name, a date range, a season (optional), and any additional notes you want to include.') . '</p>';
      $help .= '<p>' . t('You can reference the areas that this plan pertains to, and specify the total outdoor and indoor growing area involved. If your areas are mapped, you can automatically calculate the total area using the buttons provided.') . '</p>';
      $help .= '<p>' . t('Upload your nutrient management planning files and documents to the "Files" field for easy reference.') . '</p>';
      return $help;

    // Plan view page.
    case 'farm/plan/%':
    case 'farm/plan/%/view':
      $help = '<p>' . t('This page summarizes the details of this nutrient management plan.') . '</p>';
      $help .= '<p>' . t('To edit the plan, click the "Settings" tab.') . '</p>';
      return $help;
  }
}

/**
 * Implements hook_farm_ui_entity_types().
 */
function farm_nutrient_farm_ui_entity_types() {
  return array(
    'farm_plan' => array(
      'nutrient' => array(
        'label' => t('Nutrient Management Plan'),
        'label_plural' => t('Nutrient Management Plans'),
        'view' => 'farm_nutrient_plan',
      ),
    ),
  );
}

/**
 * Returns a suffix that should be applied to a given field.
 *
 * @param string $field_name
 *   The field name.
 *
 * @return string
 *   Returns a suffix string, which is used in hook_field_widget_form_alter()
 *   and hook_preprocess_field() below.
 */
function farm_nutrient_field_suffix($field_name) {
  $suffix = '';
  $system = farm_quantity_system_of_measurement();
  $field_suffix = array(
    'field_farm_total_area_outdoor' => array(
      'us' => 'acres',
      'metric' => 'hectares',
    ),
    'field_farm_total_area_indoor' => array(
      'us' => 'square feet',
      'metric' => 'square meters',
    ),
  );
  if (!empty($field_suffix[$field_name][$system])) {
    $suffix = $field_suffix[$field_name][$system];
  }
  return $suffix;
}

/**
 * Implements hook_field_widget_form_alter().
 */
function farm_nutrient_field_widget_form_alter(&$element, &$form_state, $context) {

  // Add a field suffix to the total outdoor/indoor area field widgets based on
  // the system of measurement. If this is not one of those fields, bail.
  if (empty($context['field']['#field_name'])) {
    return;
  }
  $field_name = $context['field']['#field_name'];
  $fields = array(
    'field_farm_total_area_outdoor',
    'field_farm_total_area_indoor',
  );
  if (!in_array($field_name, $fields)) {
    return;
  }

  // Add the #field_suffix and set #input_group to TRUE.
  // See https://www.drupal.org/project/bootstrap/issues/2394505
  $element['decimal']['#field_suffix'] = farm_nutrient_field_suffix($element['#field_name']);
  $element['decimal']['#input_group'] = TRUE;
}

/**
 * Implements hook_preprocess_field().
 */
function farm_nutrient_preprocess_field(&$variables, $hook) {

  // Add a field suffix to the total outdoor/indoor area field widgets based on
  // the system of measurement. If this is not one of those fields, bail.
  if (empty($variables['element']['#field_name'])) {
    return;
  }
  $field_name = $variables['element']['#field_name'];
  $fields = array(
    'field_farm_total_area_outdoor',
    'field_farm_total_area_indoor',
  );
  if (!in_array($field_name, $fields)) {
    return;
  }

  // Add the suffix to the display.
  $variables['items'][0]['#suffix'] = ' ' . farm_nutrient_field_suffix($field_name);
}

/**
 * Implements hook_form_alter().
 */
function farm_nutrient_form_alter(&$form, &$form_state, $form_id) {

  // Only act on the nutrient plan form.
  if (!($form_id == 'farm_plan_form' && $form['#bundle'] == 'nutrient')) {
    return;
  }

  // Define the fields that will have buttons added.
  $fields = array(
    'outdoor' => array(
      'field_name' => 'field_farm_total_area_outdoor',
      'button' => t('Calculate total outdoor area'),
    ),
    'indoor' => array(
      'field_name' => 'field_farm_total_area_indoor',
      'button' => t('Calculate total indoor area'),
    ),
  );

  // Add a button to each field.
  foreach ($fields as $key => $info) {

    // Create a unique HTML ID for the wrapper div.
    $wrapper_id = drupal_html_id($key);

    // First, wrap the field in a div that can be replaced via AJAX.
    $form[$info['field_name']]['#prefix'] = '<div id="' . $wrapper_id . '">';
    $form[$info['field_name']]['#suffix'] = '</div>';

    // Add an AJAX button below the field.
    $form[$info['field_name']]['calculate'] = array(
      '#type' => 'submit',
      '#value' => $info['button'],
      '#submit' => array('farm_nutrient_area_calculate_' . $key . '_submit'),
      // No need to validate when submitting this.
      '#limit_validation_errors' => array(),
      '#ajax' => array(
        'callback' => 'farm_nutrient_area_calculate_' . $key . '_ajax',
        'wrapper' => $wrapper_id,
      ),
    );
  }
}

/**
 * Ajax callback for calculate buttons.
 *
 * @param array $form
 *   The form array.
 * @param array $form_state
 *   The form state array.
 *
 * @return array
 *   Returns the part of the form that will be replaced via AJAX.
 */
function farm_nutrient_area_calculate_outdoor_ajax($form, $form_state) {
  return $form['field_farm_total_area_outdoor'];
}

/**
 * Ajax callback for calculate buttons.
 *
 * @param array $form
 *   The form array.
 * @param array $form_state
 *   The form state array.
 *
 * @return array
 *   Returns the part of the form that will be replaced via AJAX.
 */
function farm_nutrient_area_calculate_indoor_ajax($form, $form_state) {
  return $form['field_farm_total_area_indoor'];
}

/**
 * Submit function for auto-calculating total outdoor area.
 *
 * @param array $form
 *   The form array.
 * @param array $form_state
 *   The form state array.
 */
function farm_nutrient_area_calculate_outdoor_submit($form, &$form_state) {
  _farm_nutrient_area_calculate_submit('outdoor', $form, $form_state);
}

/**
 * Submit function for auto-calculating total indoor area.
 *
 * @param array $form
 *   The form array.
 * @param array $form_state
 *   The form state array.
 */
function farm_nutrient_area_calculate_indoor_submit($form, &$form_state) {
  _farm_nutrient_area_calculate_submit('indoor', $form, $form_state);
}

/**
 * Helper function for submitting the calculate button.
 *
 * @param string $type
 *   The area type: "outdoor" or "indoor".
 * @param array $form
 *   The form array.
 * @param array $form_state
 *   The form state array.
 */
function _farm_nutrient_area_calculate_submit($type, $form, &$form_state) {
  $areas = array();

  // Load a list of areas from the area reference field.
  if (!empty($form_state['input']['field_farm_area'][LANGUAGE_NONE])) {
    foreach ($form_state['input']['field_farm_area'][LANGUAGE_NONE] as $area_id) {
      $area = taxonomy_term_load($area_id);
      if (!empty($area)) {
        $areas[] = $area;
      }
    }
  }

  // Calculate the area.
  $area = farm_nutrient_calculate_area($areas, $type);

  // Add the area to the input.
  $form_state['input']['field_farm_total_area_' . $type][LANGUAGE_NONE][0]['decimal'] = $area;

  // Rebuild the form.
  $form_state['rebuild'] = TRUE;
}

/**
 * Helper function for calculating total indoor/outdoor area, given an array
 * of area entities.
 *
 * @param array $areas
 *   An array of area entities.
 * @param string $type
 *   Optionally limit the result to only include "outdoor" or "indoor" areas.
 *
 * @return string
 *   Returns a string representing the total area (the units will depend on
 *   the $type and the system of measurement).
 */
function farm_nutrient_calculate_area($areas, $type = '') {

  // If there are no areas, return 0.
  if (empty($areas)) {
    return '0';
  }

  // If the area type is invalid, return 0.
  if (!in_array($type, array('indoor', 'outdoor'))) {
    return '0';
  }

  // Define indoor vs outdoor area types.
  $area_types = array(
    'indoor' => array(
      'building',
      'greenhouse',
    ),
    'outdoor' => array(
      'property',
      'field',
      'bed',
    )
  );

  // If type is specified, filter out areas that don't match.
  $filtered_areas = array();
  if (!empty($type)) {
    foreach ($areas as $area) {

      // Skip areas without a type.
      if (empty($area->field_farm_area_type[LANGUAGE_NONE][0]['value'])) {
        continue;
      }
      $area_type = $area->field_farm_area_type[LANGUAGE_NONE][0]['value'];

      // If the area type is not in the list, skip it.
      if (!in_array($area_type, $area_types[$type])) {
        continue;
      }

      // Add the area to the filtered list.
      $filtered_areas[] = $area;
    }
  }
  else {
    $filtered_areas = $areas;
  }

  // Calculate total area of the filtered areas.
  $total_area = '0';
  foreach ($filtered_areas as $area) {
    $area_area = farm_area_calculate_area($area->tid);
    if (function_exists('bcadd')) {
      $total_area = bcadd($total_area, $area_area);
    }
    else {
      $total_area += $area_area;
    }
  }

  // Return the total, converted to units depending on the system of
  // measurement and whether it is indoor or outdoor.
  $system = farm_quantity_system_of_measurement();
  $units = array(
    'metric' => array(
      'indoor' => 'square meters',
      'outdoor' => 'hectares',
    ),
    'us' => array(
      'indoor' => 'square feet',
      'outdoor' => 'acres',
    ),
  );
  if (!empty($units[$system][$type])) {

    // Convert to the proper units.
    $total_area = farm_area_convert_area_units($total_area, $units[$system][$type]);

    // Round to 2 decimal precision.
    $total_area = round($total_area, 2);

    // Return the total area.
    return $total_area;
  }

  // Otherwise, return zero.
  return '0';
}

/**
 * Implements hook_bootstrap_iconize_text_alter().
 */
function farm_nutrient_bootstrap_iconize_text_alter(&$texts) {

  // The Bootstrap theme automatically adds a cog icon to buttons that contain
  // the string "manage", so we need to explicitly override that here to use
  // the plus icon (for consistency with other buttons that begin with "Add").
  $texts['matches'][t('Add nutrient management plan')] = 'plus';
}
